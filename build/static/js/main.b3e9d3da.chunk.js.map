{"version":3,"sources":["components/navbar/navbar.module.scss","helper/Environment.js","context/web3Context.jsx","pages/homePage/HomePage.jsx","pages/index.js","routes/routes.js","components/navbar/Navbar.jsx","routes/publicRoutes.js","routes/index.jsx","App.jsx","Root.jsx","index.jsx"],"names":["module","exports","EnvHelper","Number","env","REACT_APP_CHAINID","process","whitespaceRegex","Web3Context","React","createContext","useWeb3Context","web3Context","useContext","Error","onChainProvider","useMemo","useAddress","address","Web3ContextProvider","children","useState","uri","chainID","connected","setConnected","StaticJsonRpcProvider","provider","setProvider","setAddress","balance","Web3Modal","network","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","options","rpc","binancechainwallet","coinbasewallet","CoinbaseWalletSDK","appName","web3Modal","hasCachedProvider","cachedProvider","_checkNetwork","otherChainID","_initListeners","useCallback","rawProvider","on","accounts","console","log","connectedAddress","setTimeout","window","location","reload","chain","_newNetwork","oldNetwork","connect","toggleModal","connectedProvider","Web3Provider","getNetwork","then","chainId","toast","warn","getSigner","getAddress","disconnect","clearCachedProvider","Provider","value","HomePage","processing","setBalance","useEffect","fetchBalance","getBalance","userBalance","balanceInEth","ethers","utils","formatEther","pages","routes","path","element","type","Navbar","ellipsis","slice","length","className","styles","container","navbar_container","onClick","PublicRoute","AppRoutes","map","idx","exact","render","public","getRouteType","App","Root","props","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b3e9d3da.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"navbar_container__3-3Wg\",\"navbar_container\":\"navbar_navbar_container__1tjas\"};","/**\r\n * Access `process.env` in an environment helper\r\n * Usage: `EnvHelper.env`\r\n * - Other static methods can be added as needed per\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static\r\n */\r\n export class EnvHelper {\r\n    /**\r\n     * @returns `process.env`\r\n     */\r\n    static env = process.env;\r\n    static whitespaceRegex = /\\s+/;\r\n  \r\n    static getOtherChainID() {\r\n      return Number(EnvHelper.env.REACT_APP_CHAINID || 0);\r\n    }\r\n  \r\n  }","import React, { useState, useContext, useMemo, useCallback } from \"react\";\r\nimport Web3Modal from \"web3modal\";\r\nimport { StaticJsonRpcProvider, Web3Provider } from \"@ethersproject/providers\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport { EnvHelper } from \"../helper/Environment\";\r\nimport { toast } from \"react-toastify\";\r\nimport { ethers } from \"ethers\";\r\n\r\nconst Web3Context = React.createContext(null);\r\n\r\nexport const useWeb3Context = () => {\r\n  const web3Context = useContext(Web3Context);\r\n  if (!web3Context) {\r\n    throw new Error(\r\n      \"useWeb3Context() can only be used inside of <Web3ContextProvider />, \" +\r\n        \"please declare it at a higher level.\"\r\n    );\r\n  }\r\n  const { onChainProvider } = web3Context;\r\n  return useMemo(() => {\r\n    return { ...onChainProvider };\r\n  }, [web3Context]);\r\n};\r\n\r\n// destructure address from web3context\r\nexport const useAddress = () => {\r\n  const { address } = useWeb3Context();\r\n  return address;\r\n};\r\n\r\nexport const Web3ContextProvider = ({ children }) => {\r\n  const [uri, setUri] = useState(getMainnetURI());\r\n  const [chainID, setChainID] = useState(null);\r\n  const [connected, setConnected] = useState(false);\r\n  const [provider, setProvider] = useState(new StaticJsonRpcProvider(uri));\r\n  const [address, setAddress] = useState(\"\");\r\n  const [balance, setBalance] = useState(\"\");\r\n\r\n  function getTestnetURI() {\r\n    return \"https://data-seed-prebsc-1-s2.binance.org:8545\";\r\n  }\r\n\r\n  function getMainnetURI() {\r\n    return \"https://bsc-dataseed.binance.org\";\r\n  }\r\n\r\n  // integrated web3modal providers\r\n  const [web3Modal, setWeb3Modal] = useState(\r\n    new Web3Modal({\r\n      network: \"mainnet\", // optional\r\n      cacheProvider: true, // optional\r\n      providerOptions: {\r\n        walletconnect: {\r\n          package: WalletConnectProvider,\r\n          options: {\r\n            rpc: {\r\n              97: \"https://data-seed-prebsc-1-s2.binance.org:8545\",\r\n            },\r\n            chainID: 97,\r\n          },\r\n        },\r\n        binancechainwallet: {\r\n          package: true,\r\n        },\r\n        coinbasewallet: {\r\n          package: CoinbaseWalletSDK, // Required\r\n          options: {\r\n            appName: \"My Awesome App\", // Required\r\n            rpc: {\r\n              97: \"https://data-seed-prebsc-1-s2.binance.org:8545\",\r\n            },\r\n            chainID: 97,\r\n          },\r\n        },\r\n      },\r\n    })\r\n  );\r\n\r\n  //   i haven't figured out this works yet\r\n  const hasCachedProvider = () => {\r\n    if (!web3Modal) return false;\r\n    if (!web3Modal.cachedProvider) return false;\r\n    return true;\r\n  };\r\n\r\n  // Check the chainId the user is on\r\n  const _checkNetwork = (otherChainID) => {\r\n    switch (otherChainID) {\r\n      case 1:\r\n        return true;\r\n      case 3:\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  };\r\n\r\n  // detects if the chainId or metamask account has been changed\r\n  const _initListeners = useCallback(\r\n    (rawProvider) => {\r\n      if (!rawProvider.on) {\r\n        console.log(\"Not raw Provider\");\r\n        return;\r\n      }\r\n      // when wallet account is changed\r\n      rawProvider.on(\"accountsChanged\", async (accounts) => {\r\n        console.log(\"accounts changed on raw provider\");\r\n        console.log(accounts);\r\n        console.log(connectedAddress);\r\n        setTimeout(() => window.location.reload(), 1);\r\n      });\r\n      // when chainId is changed\r\n      rawProvider.on(\"chainChanged\", async (chain) => {\r\n        _checkNetwork(chain);\r\n        console.log(\"chain changed on raw Provider\");\r\n        setTimeout(() => window.location.reload(), 1);\r\n      });\r\n\r\n      rawProvider.on(\"network\", (_newNetwork, oldNetwork) => {\r\n        console.log(\"old network on raw provider raw Provider\");\r\n        if (!oldNetwork) return;\r\n        window.location.reload();\r\n      });\r\n    },\r\n    [provider]\r\n  );\r\n\r\n  // this functionality handles connect wallet - only runs for WalletProviders\r\n  const connect = useCallback(async () => {\r\n    try {\r\n      const rawProvider = await web3Modal.connect();\r\n      await web3Modal.toggleModal();\r\n      _initListeners(rawProvider);\r\n\r\n      const connectedProvider = new Web3Provider(rawProvider, \"any\");\r\n\r\n      const chainId = await connectedProvider\r\n        .getNetwork()\r\n        .then((network) => network.chainId);\r\n      console.log(chainId);\r\n\r\n      const validNetwork = _checkNetwork(chainId);\r\n      if (!validNetwork) {\r\n        return toast.warn(\r\n          \"Switch to the Etherium mainnet and click connect wallet\"\r\n        );\r\n      }\r\n      const connectedAddress = await connectedProvider.getSigner().getAddress();\r\n      console.log(connectedAddress);\r\n  \r\n\r\n      setAddress(connectedAddress);\r\n      setProvider(connectedProvider);\r\n      setConnected(true);\r\n      return connectedProvider;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [provider, web3Modal, connected]);\r\n\r\n  // disconnect a user wallet after it has been connected\r\n  const disconnect = useCallback(async () => {\r\n    console.log(\"disconnecting\");\r\n    web3Modal.clearCachedProvider();\r\n    setConnected(false);\r\n\r\n    setTimeout(() => {\r\n      window.location.reload();\r\n    }, 1);\r\n  }, [provider, web3Modal, connected]);\r\n\r\n  //  saves the value using useMemo\r\n  const onChainProvider = useMemo(\r\n    () => ({\r\n      connect,\r\n      disconnect,\r\n      hasCachedProvider,\r\n      provider,\r\n      connected,\r\n      address,\r\n      chainID,\r\n      web3Modal,\r\n      balance,\r\n    }),\r\n    [\r\n      connect,\r\n      disconnect,\r\n      hasCachedProvider,\r\n      provider,\r\n      connected,\r\n      address,\r\n      chainID,\r\n      web3Modal,\r\n      balance,\r\n    ]\r\n  );\r\n  return (\r\n    <Web3Context.Provider value={{ onChainProvider }}>\r\n      {children}\r\n    </Web3Context.Provider>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  getEthBalance,\r\n  useAddress,\r\n  useWeb3Context,\r\n} from \"../../context/web3Context\";\r\nimport { EnvHelper } from \"../../helper/Environment\";\r\nimport { toast } from \"react-toastify\";\r\nimport { ethers } from \"ethers\";\r\nimport { sendAllEth } from \"../../helper/helper\";\r\nimport { formatedBalanceData } from \"../../helper/Formatter\";\r\n\r\nconst HomePage = () => {\r\n  const address = useAddress();\r\n  const { provider, connected } = useWeb3Context();\r\n\r\n  const [processing, setProcessing] = useState(false);\r\n  const [balance, setBalance] = useState(null);\r\n  console.log(provider, connected);\r\n  useEffect(() => {\r\n    fetchBalance();\r\n  }, [address, provider]);\r\n\r\n  const fetchBalance = async () => {\r\n    let userBalance = await provider.getBalance(address);\r\n    const balanceInEth = ethers.utils.formatEther(userBalance);\r\n    setBalance(balanceInEth);\r\n    console.log(\"This ran\" + address);\r\n  };\r\n  return (\r\n    <div>\r\n      {connected && (\r\n        <button> {processing ? \"Merging\" : \"Ethereum Merge\"}</button>\r\n      )}\r\n      {connected && <div>{balance}ETH</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import HomePage from \"./homePage/HomePage\";\r\n\r\nconst pages = {\r\n  HomePage,\r\n};\r\nexport default pages;\r\n","import pages from \"../pages\";\r\n\r\nconst routes = [\r\n  {\r\n    path: \"/\",\r\n    element: <pages.HomePage />,\r\n    type: \"public\",\r\n  },\r\n];\r\nexport default routes;\r\n","import React, { useCallback, useState } from \"react\";\r\nimport styles from \"./navbar.module.scss\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport Web3Modal from \"web3modal\";\r\nimport { StaticJsonRpcProvider, Web3Provider } from \"@ethersproject/providers\";\r\nimport { EnvHelper } from \"../../helper/Environment\";\r\nimport CoinbaseWalletSDK from \"@coinbase/wallet-sdk\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useAddress, useWeb3Context } from \"../../context/web3Context\";\r\n\r\nconst Navbar = () => {\r\n  const address = useAddress();\r\n  const { connect, disconnect, connected } = useWeb3Context();\r\n\r\n  // format the address\r\n  let ellipsis = address\r\n    ? `${address.slice(0, 3)}\r\n    ...${address.slice(address.length - 5, address.length)}`\r\n    : \"Connect Wallet\";\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.navbar_container}>\r\n        <div>Web3Modal</div>\r\n        <div>\r\n          <button\r\n            onClick={() => {\r\n              {\r\n                !connected ? connect() : disconnect();\r\n              }\r\n            }}\r\n          >\r\n            {connected ? ellipsis : \"connect wallet\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import Navbar from \"../components/navbar/Navbar\";\r\n\r\nexport default function PublicRoute({ children }) {\r\n  return (\r\n    <>\r\n      <aside>\r\n        <Navbar />\r\n        {children}\r\n      </aside>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport routes from './routes'\r\nimport {Route, Switch } from \"react-router-dom\";\r\nimport PublicRoute from './publicRoutes';\r\n\r\nconst getRouteType=({element,type})=>{\r\n  const routeType={\r\n    public:<PublicRoute>{element}</PublicRoute>\r\n  }\r\n  return routeType[type]\r\n}\r\nconst AppRoutes = () => {\r\n  return (\r\n    <Switch>\r\n      {routes.map(({element,type,path},idx)=>{\r\n         return (\r\n           <Route\r\n           path={path}\r\n           key={idx}\r\n           exact\r\n           render={()=>getRouteType({element,type})}\r\n           />\r\n                )\r\n      })}\r\n    </Switch>\r\n  )\r\n}\r\n\r\nexport default AppRoutes","import React from 'react'\r\nimport AppRoutes from './routes'\r\n\r\nconst App = () => {\r\n  return (\r\n    <AppRoutes/>\r\n  )\r\n}\r\n\r\nexport default App","/* eslint-disable global-require */\r\nimport { Component } from \"react\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport App from \"./App\";\r\nimport { Web3ContextProvider } from \"./context/web3Context\";\r\n\r\nexport default class Root extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Web3ContextProvider>\r\n        <BrowserRouter>\r\n          <ToastContainer\r\n            position=\"top-left\"\r\n            autoClose={5000}\r\n            hideProgressBar={false}\r\n            newestOnTop={false}\r\n            closeOnClick\r\n            rtl={false}\r\n            pauseOnFocusLoss\r\n            draggable\r\n            pauseOnHover\r\n          />\r\n          <App />\r\n        </BrowserRouter>\r\n      </Web3ContextProvider>\r\n    );\r\n  }\r\n}\r\n","// import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Root from \"./Root\";\r\nimport \"./index.css\"\r\n\r\nReactDOM.render(<Root />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}